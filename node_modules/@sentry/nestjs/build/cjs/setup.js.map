{"version":3,"file":"setup.js","sources":["../../src/setup.ts"],"sourcesContent":["import type {\n  ArgumentsHost,\n  CallHandler,\n  DynamicModule,\n  ExecutionContext,\n  HttpServer,\n  NestInterceptor,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { Catch, Global, HttpException, Injectable, Logger, Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR, BaseExceptionFilter } from '@nestjs/core';\nimport type { Span } from '@sentry/core';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  captureException,\n  getClient,\n  getDefaultIsolationScope,\n  getIsolationScope,\n  logger,\n  spanToJSON,\n} from '@sentry/core';\nimport type { Observable } from 'rxjs';\nimport { isExpectedError } from './helpers';\n\n// Partial extract of FastifyRequest interface\n// https://github.com/fastify/fastify/blob/87f9f20687c938828f1138f91682d568d2a31e53/types/request.d.ts#L41\ninterface FastifyRequest {\n  routeOptions?: {\n    url?: string;\n  };\n  method?: string;\n}\n\n// Partial extract of ExpressRequest interface\ninterface ExpressRequest {\n  route?: {\n    path?: string;\n  };\n  method?: string;\n}\n\n/**\n * Note: We cannot use @ syntax to add the decorators, so we add them directly below the classes as function wrappers.\n */\n\n/**\n * Interceptor to add Sentry tracing capabilities to Nest.js applications.\n *\n * @deprecated `SentryTracingInterceptor` is deprecated.\n * If you are using `@sentry/nestjs` you can safely remove any references to the `SentryTracingInterceptor`.\n * If you are using another package migrate to `@sentry/nestjs` and remove the `SentryTracingInterceptor` afterwards.\n */\nclass SentryTracingInterceptor implements NestInterceptor {\n  // used to exclude this class from being auto-instrumented\n  public readonly __SENTRY_INTERNAL__: boolean;\n\n  public constructor() {\n    this.__SENTRY_INTERNAL__ = true;\n  }\n\n  /**\n   * Intercepts HTTP requests to set the transaction name for Sentry tracing.\n   */\n  public intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\n    if (getIsolationScope() === getDefaultIsolationScope()) {\n      logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n      return next.handle();\n    }\n\n    if (context.getType() === 'http') {\n      const req = context.switchToHttp().getRequest() as FastifyRequest | ExpressRequest;\n      if ('routeOptions' in req && req.routeOptions && req.routeOptions.url) {\n        // fastify case\n        getIsolationScope().setTransactionName(`${(req.method || 'GET').toUpperCase()} ${req.routeOptions.url}`);\n      } else if ('route' in req && req.route && req.route.path) {\n        // express case\n        getIsolationScope().setTransactionName(`${(req.method || 'GET').toUpperCase()} ${req.route.path}`);\n      }\n    }\n\n    return next.handle();\n  }\n}\n// eslint-disable-next-line deprecation/deprecation\nInjectable()(SentryTracingInterceptor);\n// eslint-disable-next-line deprecation/deprecation\nexport { SentryTracingInterceptor };\n\n/**\n * Global filter to handle exceptions and report them to Sentry.\n */\nclass SentryGlobalFilter extends BaseExceptionFilter {\n  public readonly __SENTRY_INTERNAL__: boolean;\n  private readonly _logger: Logger;\n\n  public constructor(applicationRef?: HttpServer) {\n    super(applicationRef);\n    this.__SENTRY_INTERNAL__ = true;\n    this._logger = new Logger('ExceptionsHandler');\n  }\n\n  /**\n   * Catches exceptions and reports them to Sentry unless they are expected errors.\n   */\n  public catch(exception: unknown, host: ArgumentsHost): void {\n    // The BaseExceptionFilter does not work well in GraphQL applications.\n    // By default, Nest GraphQL applications use the ExternalExceptionFilter, which just rethrows the error:\n    // https://github.com/nestjs/nest/blob/master/packages/core/exceptions/external-exception-filter.ts\n    if (host.getType<'graphql'>() === 'graphql') {\n      // neither report nor log HttpExceptions\n      if (exception instanceof HttpException) {\n        throw exception;\n      }\n\n      if (exception instanceof Error) {\n        this._logger.error(exception.message, exception.stack);\n      }\n\n      captureException(exception);\n      throw exception;\n    }\n\n    if (!isExpectedError(exception)) {\n      captureException(exception);\n    }\n\n    return super.catch(exception, host);\n  }\n}\nCatch()(SentryGlobalFilter);\nexport { SentryGlobalFilter };\n\n/**\n * Global filter to handle exceptions in NestJS + GraphQL applications and report them to Sentry.\n *\n * @deprecated `SentryGlobalGraphQLFilter` is deprecated. Use the `SentryGlobalFilter` instead. The `SentryGlobalFilter` is a drop-in replacement.\n */\nclass SentryGlobalGraphQLFilter {\n  private static readonly _logger = new Logger('ExceptionsHandler');\n  public readonly __SENTRY_INTERNAL__: boolean;\n\n  public constructor() {\n    this.__SENTRY_INTERNAL__ = true;\n  }\n\n  /**\n   * Catches exceptions and reports them to Sentry unless they are HttpExceptions.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public catch(exception: unknown, host: ArgumentsHost): void {\n    // neither report nor log HttpExceptions\n    if (exception instanceof HttpException) {\n      throw exception;\n    }\n    if (exception instanceof Error) {\n      // eslint-disable-next-line deprecation/deprecation\n      SentryGlobalGraphQLFilter._logger.error(exception.message, exception.stack);\n    }\n    captureException(exception);\n    throw exception;\n  }\n}\n// eslint-disable-next-line deprecation/deprecation\nCatch()(SentryGlobalGraphQLFilter);\n// eslint-disable-next-line deprecation/deprecation\nexport { SentryGlobalGraphQLFilter };\n\n/**\n * Global filter to handle exceptions and report them to Sentry.\n *\n * This filter is a generic filter that can handle both HTTP and GraphQL exceptions.\n *\n * @deprecated `SentryGlobalGenericFilter` is deprecated. Use the `SentryGlobalFilter` instead. The `SentryGlobalFilter` is a drop-in replacement.\n */\nexport const SentryGlobalGenericFilter = SentryGlobalFilter;\n\n/**\n * Service to set up Sentry performance tracing for Nest.js applications.\n *\n * @deprecated `SentryService` is deprecated.\n * If you are using `@sentry/nestjs` you can safely remove any references to the `SentryService`.\n * If you are using another package migrate to `@sentry/nestjs` and remove the `SentryService` afterwards.\n */\nclass SentryService implements OnModuleInit {\n  public readonly __SENTRY_INTERNAL__: boolean;\n\n  public constructor() {\n    this.__SENTRY_INTERNAL__ = true;\n  }\n\n  /**\n   * Initializes the Sentry service and registers span attributes.\n   */\n  public onModuleInit(): void {\n    // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n    // We register this hook in this method, because if we register it in the integration `setup`,\n    // it would always run even for users that are not even using Nest.js\n    const client = getClient();\n    if (client) {\n      client.on('spanStart', span => {\n        addNestSpanAttributes(span);\n      });\n    }\n  }\n}\n// eslint-disable-next-line deprecation/deprecation\nInjectable()(SentryService);\n// eslint-disable-next-line deprecation/deprecation\nexport { SentryService };\n\n/**\n * Set up a root module that can be injected in nest applications.\n */\nclass SentryModule {\n  /**\n   * Configures the module as the root module in a Nest.js application.\n   */\n  public static forRoot(): DynamicModule {\n    return {\n      module: SentryModule,\n      providers: [\n        // eslint-disable-next-line deprecation/deprecation\n        SentryService,\n        {\n          provide: APP_INTERCEPTOR,\n          // eslint-disable-next-line deprecation/deprecation\n          useClass: SentryTracingInterceptor,\n        },\n      ],\n      // eslint-disable-next-line deprecation/deprecation\n      exports: [SentryService],\n    };\n  }\n}\nGlobal()(SentryModule);\nModule({\n  providers: [\n    // eslint-disable-next-line deprecation/deprecation\n    SentryService,\n    {\n      provide: APP_INTERCEPTOR,\n      // eslint-disable-next-line deprecation/deprecation\n      useClass: SentryTracingInterceptor,\n    },\n  ],\n  // eslint-disable-next-line deprecation/deprecation\n  exports: [SentryService],\n})(SentryModule);\nexport { SentryModule };\n\nfunction addNestSpanAttributes(span: Span): void {\n  const attributes = spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`,\n  });\n}\n"],"names":["getIsolationScope","getDefaultIsolationScope","logger","Injectable","BaseExceptionFilter","Logger","HttpException","captureException","isExpectedError","Catch","getClient","APP_INTERCEPTOR","Global","Module","spanToJSON","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN"],"mappings":"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"}